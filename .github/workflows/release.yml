name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
      - 'v[0-9]+.[0-9]+.[0-9]+\+*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=temp-
          labels: |
            org.opencontainers.image.title=${GITHUB_REPOSITORY#*/}
            org.opencontainers.image.version=${GITHUB_REF#refs/tags/v}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

  build:
    needs: prepare
    strategy:
      matrix:
        platform:
          - name: amd64
            runner: ubuntu-24.04
          - name: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.platform.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform.name }}
          push: true
          provenance: true
          sbom: true
          tags: ${{ needs.prepare.outputs.tags }}-${{ matrix.platform.name }}
          labels: ${{ needs.prepare.outputs.labels }}

      - name: Clean up temporary tags
        run: |
          docker buildx imagetools rm ${{ needs.prepare.outputs.tags }}-${{ matrix.platform.name }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform.name }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Create and push manifest
        run: |
          # 获取所有的 digest 文件
          digests=()
          for platform in "amd64" "arm64"; do
            digest=$(cat ${{ runner.temp }}/digests/*-${platform})
            digests+=("${digest}")
          done

          # 为每个标签创建多平台 manifest
          for tag in ${{ needs.prepare.outputs.tags }}; do
            echo "正在为 $tag 创建 manifest..."
            docker buildx imagetools create -t $tag \
              $(for digest in "${digests[@]}"; do echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${digest} "; done)
            
            echo "正在验证 manifest..."
            docker buildx imagetools inspect $tag
          done