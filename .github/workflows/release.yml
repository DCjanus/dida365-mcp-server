name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
      - 'v[0-9]+.[0-9]+.[0-9]+\+*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ !contains(github.ref, '-') }}
          labels: |
            org.opencontainers.image.title=${GITHUB_REPOSITORY#*/}
            org.opencontainers.image.version=${GITHUB_REF#refs/tags/v}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

  build-amd64:
    needs: prepare
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          platforms: linux/amd64
          tags: ${{ needs.prepare.outputs.tags }}
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/amd64.tar

      - name: Upload AMD64 image
        uses: actions/upload-artifact@v4
        with:
          name: amd64-image
          path: /tmp/amd64.tar
          retention-days: 1

  build-arm64:
    needs: prepare
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          platforms: linux/arm64
          tags: ${{ needs.prepare.outputs.tags }}
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/arm64.tar

      - name: Upload ARM64 image
        uses: actions/upload-artifact@v4
        with:
          name: arm64-image
          path: /tmp/arm64.tar
          retention-days: 1

  merge:
    needs: [prepare, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download AMD64 image
        uses: actions/download-artifact@v4
        with:
          name: amd64-image
          path: /tmp

      - name: Download ARM64 image
        uses: actions/download-artifact@v4
        with:
          name: arm64-image
          path: /tmp
      
      - name: Create multi-arch manifest
        run: |
          # Create temporary directory
          mkdir -p /tmp/images
          
          # Load images from build tasks
          docker load -i /tmp/amd64.tar
          docker load -i /tmp/arm64.tar
          
          # Create multi-arch manifest for each tag
          for tag in ${{ needs.prepare.outputs.tags }}; do
            # Tag images with architecture-specific tags
            docker tag $tag $tag-amd64
            docker tag $tag $tag-arm64
            
            # Create and push multi-arch manifest
            docker manifest create $tag \
              --amend $tag-amd64 \
              --amend $tag-arm64
            docker manifest push $tag
          done
